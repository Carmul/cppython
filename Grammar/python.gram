# Python grammar

	
program : statements EOF_TOKEN

statements : ( compound_stmt | simple_stmt NEWLINE )*

simple_stmt : print_stmt | assignment_stmt | expr

compound_stmt : if_stmt

if_stmt : IF expr COLON NEWLINE block else_stmt?

elif_stmt : ELIF expr COLON NEWLINE block (else_stmt | elif_stmt)?

else_stmt : ELSE COLON NEWLINE block

while_stmt : WHILE expr COLON NEWLINE block

block : INDENT statements DEDENT

print_stmt : PRINT LPAR expression RPAR

assignment_stmt : NAME EQUAL expr


expr : comparison

comparison : arith_expr ( (EQEQUAL | NOTEQUAL | LESSEQUAL | GREATEREQUAL | LESS | GREATER) arith_expr )*

arith_expr : term ( (PLUS | MINUS) term )*
	
term : factor ( (MUL | DIV) factor )*
	
factor : (PLUS | MINUS) factor | NUMBER | NAME | LPAR expr RPAR | BOOLEAN | STRING | function_call

function_call : NAME LPAR (expr (COMMA expr)*)? RPAR
	